#!/usr/bin/env python

from gnuradio import analog
from gnuradio import eng_notation
from gnuradio import filter
from gnuradio import gr
from gnuradio.eng_option import eng_option
from gnuradio.filter import firdes
from optparse import OptionParser
import igate
import osmosdr
import time

class aprs_dump(gr.top_block):
    def __init__(self):
        gr.top_block.__init__(self, "APRS dump")

        ##################################################
        # Variables
        ##################################################
        self.samp_rate = samp_rate = 9600
        self.if_samp_rate = if_samp_rate = samp_rate*8
        self.rf_samp_rate = rf_samp_rate = if_samp_rate*12
        self.freq_offset = freq_offset = 100000
        self.freq = freq = 144800000

        ##################################################
        # Blocks
        ##################################################
        self.rtlsdr_source_0 = osmosdr.source( args="numchan=" + str(1) + " " + '' )
        self.rtlsdr_source_0.set_sample_rate(rf_samp_rate)
        self.rtlsdr_source_0.set_center_freq(freq+freq_offset, 0)
        self.rtlsdr_source_0.set_freq_corr(0, 0)
        self.rtlsdr_source_0.set_dc_offset_mode(0, 0)
        self.rtlsdr_source_0.set_iq_balance_mode(2, 0)
        self.rtlsdr_source_0.set_gain_mode(True, 0)
        self.rtlsdr_source_0.set_gain(20, 0)
        self.rtlsdr_source_0.set_if_gain(20, 0)
        self.rtlsdr_source_0.set_bb_gain(20, 0)
        self.rtlsdr_source_0.set_antenna('', 0)
        self.rtlsdr_source_0.set_bandwidth(0, 0)

        self.freq_xlating_fft_filter_ccc_0 = filter.freq_xlating_fft_filter_ccc(rf_samp_rate/if_samp_rate, (firdes.low_pass(1, rf_samp_rate, 12500, 2000)), -freq_offset, rf_samp_rate)
        self.freq_xlating_fft_filter_ccc_0.set_nthreads(1)
        self.freq_xlating_fft_filter_ccc_0.declare_sample_delay(0)

        self.analog_fm_demod_cf_0 = analog.fm_demod_cf(
        	channel_rate=if_samp_rate,
        	audio_decim=if_samp_rate/samp_rate,
        	deviation=5000,
        	audio_pass=4000,
        	audio_stop=5000,
        	gain=1.0,
        	tau=75e-6,
        )

        self.igate_aprs_demod_0 = igate.aprs_demod(samp_rate)

        self.igate_debug_print_msg_0 = igate.debug_print_msg()


        ##################################################
        # Connections
        ##################################################
        self.connect((self.rtlsdr_source_0, 0), (self.freq_xlating_fft_filter_ccc_0, 0))
        self.connect((self.freq_xlating_fft_filter_ccc_0, 0), (self.analog_fm_demod_cf_0, 0))
        self.connect((self.analog_fm_demod_cf_0, 0), (self.igate_aprs_demod_0, 0))
        self.msg_connect((self.igate_aprs_demod_0, 'out'), (self.igate_debug_print_msg_0, 'in'))

    def get_samp_rate(self):
        return self.samp_rate

    def set_samp_rate(self, samp_rate):
        self.samp_rate = samp_rate
        self.set_if_samp_rate(self.samp_rate*5)

    def get_rf_samp_rate(self):
        return self.rf_samp_rate

    def set_rf_samp_rate(self, rf_samp_rate):
        self.rf_samp_rate = rf_samp_rate
        self.rtlsdr_source_0.set_sample_rate(self.rf_samp_rate)
        self.freq_xlating_fft_filter_ccc_0.set_taps((firdes.low_pass(1, self.rf_samp_rate, 12500, 2000)))

    def get_if_samp_rate(self):
        return self.if_samp_rate

    def set_if_samp_rate(self, if_samp_rate):
        self.if_samp_rate = if_samp_rate

    def get_freq_offset(self):
        return self.freq_offset

    def set_freq_offset(self, freq_offset):
        self.freq_offset = freq_offset
        self.rtlsdr_source_0.set_center_freq(self.freq+self.freq_offset, 0)
        self.freq_xlating_fft_filter_ccc_0.set_center_freq(-self.freq_offset)

    def get_freq(self):
        return self.freq

    def set_freq(self, freq):
        self.freq = freq
        self.rtlsdr_source_0.set_center_freq(self.freq+self.freq_offset, 0)

    def get_chn_decimation(self):
        return self.chn_decimation

    def set_chn_decimation(self, chn_decimation):
        self.chn_decimation = chn_decimation


if __name__ == '__main__':
    tb = aprs_dump()
    tb.start()
    tb.wait()
